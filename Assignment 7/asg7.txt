Geoff Arroyo
Assignment 7
COSC 2425
****BONUS POINTS ATTEMPTED*****
---------------------------------------------------------------------------------------------------------

package asg7;

public class StackListLinkedListImpl<T> implements StackList<T>{
	private Node<T> head;
	private int maxSize;
	private int count;
	
	// Default constructor for the StackListLinkedListImpl class. Set the instance's maxSize field 
	// to the DEFAULT_MAX_SIZE variable
	public StackListLinkedListImpl() {
		this.maxSize = StackList.DEFAULT_MAX_SIZE;
		this.head = null;
		this.count = 0;
	}
	
	// 1 Argument constructor for the StackListLinkedListImpl class. If the int passed in to
	// constructor is less than 0 or greater than the largest variable, set 
	// the instance's maxSize field to default max size
	public StackListLinkedListImpl(int resize) {
		if (resize < 0 || resize > StackList.LARGEST) {
			resize = DEFAULT_MAX_SIZE;
		}
		this.maxSize = resize;
		this.head = null;
		this.count = 0;
	}
	
	/*receives: nothing
    *  task:  tests to see if the Stack has 0 elements
    *  returns: true if this StackList is empty (has 0 elements) false otherwise;
    */
	public boolean isEmpty() {
		if (this.count == 0) return true;
		else return false;
	}

	/**receives: nothing
	   *  task:  tests to see if this StackList instance has getMaxSize() elements 
	   *  returns: true if this StackList is full (has getMaxSize() elements) false otherwise;
	*/
	public boolean isFull() {
		if (this.getMaxSize() == this.count) return true;
		else return false;
	}

	/** receives: nothing
	 * returns: number of elements on this StackList (always <= to getMaxSize())
	 */
	public int getSize() {
		return this.count;
	}


	/** receives: element to place on top of this StackList
	 * task: received element is on top of this StackList instance if it is not full
	 * returns: nothing
	 *@throws RuntimeException if this StackList is full (has max size elements already)
	 */
	public void push(T element) {
		if (this.isFull() == true) {
			throw new RuntimeException("Stack is full!");
		}
		Node<T> toAdd = new Node<T>(element);
		Node<T> counter = this.head;
		/*if (this.count == 0) {
			toAdd.link = this.head;
			this.head = toAdd;
			return;
		}*/
		toAdd.link = this.head; 
		this.head = toAdd;
		this.count++;
		
	}

	/** receives: nothing
	   returns:  removes AND returns the top item from this StackList if  it is NOT empty. 
	 * @throws - RuntimeException if attempt to pop an empty StackList
	 */
	public T pop() {
		if (this.count == 0) {
			throw new RuntimeException("Stack is empty!");
		}
		T retValue = this.head.data;
		this.head = this.head.link;
		this.count--;
		return retValue;
	}

	/** receives: nothing
	  *returns the top item from this StackList  if it is
	 *         not empty.  DOES NOT POP IT.
	 * @throws - RuntimeException if attempt to peek at an empty StackList instance
	 */
	public T peek() {
		if (this.isEmpty() == true) {
			throw new RuntimeException("Stack is empty!");
		}
		return this.head.data;
	}

	/**receives: nothing
    returns: nothing
    task:  removes all items from this StackList, making it empty.
	 */
	public void clear() {
		this.head = null;
		this.count = 0;
	}

	/** receives: nothing
	 * returns: max number of elements allowed on this StackList (always <= to getMaxSize())
	 */
	public int getMaxSize() {
		return this.maxSize;
	}
	
	// toString method for the StackListLinkedListImpl class. The returned string should include
	// each StackList instance from TOP TO BOTTOM 1 element per line.
	public String toString() {
		String retValue= "";
		Node<T> first = this.head;
		while(first != null) {
			retValue += first.data.toString();
			retValue += "\n";
			first = first.link;
		}
		return retValue;
	}

}

-----------------------------------------------------------------------------------------------------------

package asg7;

import java.util.ArrayList;

public class QueueListLinkedListImpl<T> implements QueueList<T> {

	private Node<T> head;
	private int count;
	private int maxSize;
	private Node<T> tail;
	// Default constructor for the QueueListLinkedListImpl class. Set the head and tail to null.
	// Set the count of elements to 0. Set the private data field maxSize to the DEFAULT_MAX_SIZE amount
	public QueueListLinkedListImpl() {
		this.head = null;
		this.tail = null;
		this.count = 0;
		this.maxSize = QueueList.DEFAULT_MAX_SIZE;
	}
	
	// One argument constructor for the QueueListLinkedListImpl() class. Make sure the resize variable 
	// is between 0 and the the LARGEST variable declared in the QueueList interface. If not, 
	// then set the maxSize field to the DEFAULT_MAX_SIZE constant value. 
	public QueueListLinkedListImpl(int resize) {
		if (resize < 0 || resize > QueueList.LARGEST) {
			resize = QueueList.DEFAULT_MAX_SIZE;
		}
		this.maxSize = resize;
	}
	
	/** receives: nothing
	 *  task:  tests to see if this QueueList has 0 elements
	 *  returns: true if this QueueList is empty (has 0 elements) false otherwise;
	 */
	public boolean isEmpty() {
		if (this.count == 0) return true;
		else return false;
	}
	
	/** receives: nothing
	 *  task:  tests to see if this QueueList has getMaxSize() elements
	 *  returns: true if this QueueList is full (has getMaxSize() elements) false otherwise;
	 */
	@Override
	public boolean isFull() {
		if (this.getMaxSize() == this.count) {
			return true;
		}
		else {
			return false;
		}
	}

	/** receives: nothing
	 * returns:  number of elements in this QueueList
	 */
	public int getSize() {
		return this.count;
	}

	/** receives: nothing
	 * returns:  max allowable number of elements in this QueueList
	 */
	public int getMaxSize() {
		return this.maxSize;
	}

	/** places item at the REAR of this QueueList
	 *receives: nothing
	 * returns: nothing
	 * task:  element is placed at the REAR or END of this QueueList if it is NOT full
	 *throws: RuntimeException if this QueueList is full
	 */
	public void add(T element) {
		if (this.isFull() == true) {
			throw new RuntimeException("Queue is full.");
		}
		
		Node<T> toAdd = new Node<T>(element);
		if (this.count == 0) {
			this.tail = toAdd;
			this.head = toAdd;
			this.count++;
			return;
		}
		if (this.count == 1) {
			this.head.link = toAdd;
			this.tail = toAdd;
			this.count++;
			return;
		}
		this.tail.link = toAdd;
		this.tail = toAdd;
		this.count++;
	}

	/** receives: nothing
	   returns:  removes and returns the FRONT item from this QueueList if it is NOT empty
	 * @throws - RuntimeException if attempt to remove from an empty QueueList
	
	 */
	public T remove() {
		if (this.count == 0) {
			throw new RuntimeException("Queue is empty");
		}
		T retValue = this.head.data;
		this.head = this.head.link;
		this.count--;
		return retValue;
	}

	/** receives: nothing
	 * returns: the FRONT item from this QueueList if it is
	 * not empty.  DOES NOT REMOVE IT.
	 * @throws - RuntimeException if this QueueList is empty.
	 */
	public T getRear() {
		if (this.count == 0) {
			throw new RuntimeException("Queue is empty.");
		}
		return this.tail.data;
	}

	/** receives: nothing
	 * returns: the REAR (or last)  item from this QueueList if it is
	 *      not empty.  DOES NOT REMOVE IT.
	 * @throws - RuntimeException if this QueueList is empty.
	 */
	public T getFront() {
		if (this.count == 0) {
			throw new RuntimeException("Queue is empty.");
		}
		Node<T> pointer = this.head;
		return pointer.data;
	}

	// Clear the current QueueListLinkedListImpl so that there are no elements left in the queue. 
	public void clear() {
		this.head = null;
		this.count = 0;
	}
	
	// Override the toString() class for QueueListLinkedListImpl(). Start at the head node in the queue
	// and include a new line after each node. 
	public String toString() {
		Node<T> pointer = this.head;
		String retValue = "";
		while(pointer != null) {
			retValue += pointer.data.toString();
			retValue += "\n";
			pointer = pointer.link;
		}
		return retValue;
	} 

}

---------------------------------------------------------------------------------------------------------

Enter your name: Geoff
Execution Geoff begins  at: 2019-04-17 02:50:29
Now testing toString() for QueueListImpl
****
toString()
first
second
third
****
SUCCESS, add throws a RuntimeException on a FULL QUEUE
java.lang.RuntimeException: Queue is full.
SUCCESS, getFront() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Queue is empty.
SUCCESS, getRear() throws a RuntimeException on and EMPTY QUEUE
java.lang.RuntimeException: Queue is empty.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Queue is empty
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Queue is empty
****  Now testing QueueList of Integer ****
SUCCESS, add() throws a RuntimeException on a FULL QUEUE
java.lang.RuntimeException: Queue is full.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Queue is empty
SUCCESS, getRear() throws a RuntimeException on and EMPTY QUEUE
java.lang.RuntimeException: Queue is empty.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Queue is empty
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Queue is empty
SUCCESS, getRear() throws a RuntimeException on and EMPTY QUEUE
java.lang.RuntimeException: Queue is empty.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Queue is empty
Testing toString()
SUCCESS QueueTesting PASSES
SUCCESS Queue Testing Complete
Execution Geoff ends  at: 2019-04-17 02:50:29

----------------------------------------------------------------------------------------------------------

package asg7;
// main program that runs the Stack and Queue Gui testing
// uses the Model-View-Controller paradigm
// the controller is StackQueueViewImpl 
// the models are StackEngine and QueueEngine instances
// the view is part of the controller in StackQueueViewImpl class

import java.awt.FlowLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;



public class StackQueueFrame {

	public static final int FRAME_WIDTH=800;
	public static final int FRAME_HEIGHT=600;
	public static void main(String[]args)
	{
	StackEngine stackEngine = new StackEngineImpl(4);
	QueueEngine queueEngine = new QueueEngineImpl(4);
	StackQueueViewImpl controller = new StackQueueViewImpl(stackEngine,queueEngine);
	JFrame frame = new JFrame("Stack and Queue Gui Example -- GEOFF");
	frame.setLayout(new FlowLayout());
	frame.addWindowListener( new WindowAdapter() {
		public void windowClosing(WindowEvent windowEvent)
		{
			System.exit(0);
		}
	});
	frame.getContentPane().add(controller);
	frame.setSize(StackQueueFrame.FRAME_WIDTH,StackQueueFrame.FRAME_HEIGHT);
	frame.setVisible(true);
   }

}

--------------------------------------------------------------------------------------------------------------------

package asg7;
/** engine implementation that models the use of two different stack implementations
 *   provides a minimal set of methods
 *  that models/uses two stacks and allows a few operations on those stacks
 *  @author: LJBaker
 */
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

public class StackEngineImpl implements StackEngine {
	private StackList<String> stack; // one of 2 stacks used in this engine

	private EventListenerList eventListenerList;  // stores one or more event listener
	private final ChangeEvent CHANGE_EVENT = new ChangeEvent(this);
	private String actionText;
	
	// default constructor, builds the stack with default max size of 4
	public StackEngineImpl()
	{
		stack = new StackListLinkedListImpl<String>(StackEngine.DEFAULT_MAX_SIZE);
		this.eventListenerList = new EventListenerList();
		this.actionText="Stack is EMPTY";
	}
	public StackEngineImpl(int aMax)
	{
		if(aMax>=0 && aMax <=StackList.LARGEST)
		{
			stack = new StackListLinkedListImpl<String>(aMax);
		}
		else
		{
			stack = new StackListLinkedListImpl<String>(StackEngine.DEFAULT_MAX_SIZE);
		}
		this.eventListenerList = new EventListenerList();
		this.actionText="Stack is EMPTY";
	}
	//the expected method for any class, returns a string of
	// the current stack contents 
	public String toString()
	{
		String temp = "";
		temp = stack.toString();

		return temp;
	}

	public String getActionText()
	{
		return this.actionText;
	}

	//pre: stack being pushed is not full
	// post: stack has contents of element on the top
	//       actionText contains information about results.
	public void push(String element) {
		if(stack.getSize() >= stack.getMaxSize())
		{
			actionText = "NO PUSH FULL Stack";
		}
		else
		{
			stack.push(element);
			actionText = "PUSHED: " + element;
		}

		this.fireChangeEvent(CHANGE_EVENT);
	}
	//pre: stack is not empty
	// post: sets actionText to describe top element on current stack
	//       actionText contains information about value peeked at.
	public void peek() 
	{
		if (stack.getSize() == 0) {
			actionText = "NO PEEK EMPTY STACK";
		}
		else {
			actionText = "TOP OF STACK: " + this.stack.peek();
		}
		this.fireChangeEvent(CHANGE_EVENT);


	}
	//pre: stack is not empty
	// post: returns AND REMOVES top element on current stack
	//       actionText contains information about results.
	public void pop() {
		if(stack.isEmpty())
		{
			actionText = "Cannot POP -- EMPTY STACK";
		}
		else 
		{
			String res = this.stack.pop();
			actionText = "POPPED: " + res;
		}
		this.fireChangeEvent(CHANGE_EVENT);
	}
	//pre: none
	// post: number of elements on stack is returned
	public int getSize() {
		return this.stack.getSize();
	}

	//pre: none
	// post: returns max size for current stack 
	public int getMaxSize()
	{
		return this.stack.getMaxSize();
	}
	// Display the maxSize field of the stack instance to the GUI by using getMaxSize() accessor.
	public void showMaxSize()
	{
		actionText = "MAX SIZE IS: " +  this.stack.getMaxSize();
		this.fireChangeEvent(CHANGE_EVENT);

	}
	//pre: none
	// post: returns true iff the current stack has a size of 0.
	public void testEmpty() 
	{

		actionText = (this.stack.isEmpty() ? "STACK IS EMPTY" : "STACK IS NOT EMPTY");
		this.fireChangeEvent(CHANGE_EVENT);		

	}
	//pre: none
	// post: returns true if the stack currently has MAX_ELEMENTS on it.
	public void testFull() 
	{

		actionText = (this.stack.isFull() ? "STACK IS FULL" : "STACK IS NOT FULL");
		this.fireChangeEvent(CHANGE_EVENT);			
	}
	// pre: none
	// post: current stack is empty, size is 0.
	public void clear()
	{  
		this.stack.clear();
		actionText = "Stack is CLEAR";
		this.fireChangeEvent(CHANGE_EVENT);
		//fill in code
	}
	//standard boilerplate method for change events
	public void addChangeListener(ChangeListener changeListener)
	{
		eventListenerList.add(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	public void removeChangeListener(ChangeListener changeListener)
	{
		eventListenerList.remove(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	// used when we need to notify the view that a change to the model has taken place
	// so that the view can update itself.
	public void fireChangeEvent(ChangeEvent changeEvent) {
		// Guaranteed to return a non-null array
		Object[] listeners = eventListenerList.getListenerList();
		// Process the listeners last to first, notifying
		// those that are interested in this event
		for (int i = listeners.length-2; i>=0; i-=2) {
			if (listeners[i]==ChangeListener.class) {
				((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
			}
		}
	}

}

--------------------------------------------------------------------------------------------------------------------

package asg7;
/** engine implementation that models the use of two different stack implementations
 *   provides a minimal set of methods
 *  that models/uses two stacks and allows a few operations on those stacks
 *  @author: LJBaker
 */
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

public class StackEngineImpl implements StackEngine {
	private StackList<String> stack; // one of 2 stacks used in this engine

	private EventListenerList eventListenerList;  // stores one or more event listener
	private final ChangeEvent CHANGE_EVENT = new ChangeEvent(this);
	private String actionText;
	
	// default constructor, builds the stack with default max size of 4
	public StackEngineImpl()
	{
		stack = new StackListLinkedListImpl<String>(StackEngine.DEFAULT_MAX_SIZE);
		this.eventListenerList = new EventListenerList();
		this.actionText="Stack is EMPTY";
	}
	public StackEngineImpl(int aMax)
	{
		if(aMax>=0 && aMax <=StackList.LARGEST)
		{
			stack = new StackListLinkedListImpl<String>(aMax);
		}
		else
		{
			stack = new StackListLinkedListImpl<String>(StackEngine.DEFAULT_MAX_SIZE);
		}
		this.eventListenerList = new EventListenerList();
		this.actionText="Stack is EMPTY";
	}
	//the expected method for any class, returns a string of
	// the current stack contents 
	public String toString()
	{
		String temp = "";
		temp = stack.toString();

		return temp;
	}

	public String getActionText()
	{
		return this.actionText;
	}

	//pre: stack being pushed is not full
	// post: stack has contents of element on the top
	//       actionText contains information about results.
	public void push(String element) {
		if(stack.getSize() >= stack.getMaxSize())
		{
			actionText = "NO PUSH FULL Stack";
		}
		else
		{
			stack.push(element);
			actionText = "PUSHED: " + element;
		}

		this.fireChangeEvent(CHANGE_EVENT);
	}
	//pre: stack is not empty
	// post: sets actionText to describe top element on current stack
	//       actionText contains information about value peeked at.
	public void peek() 
	{
		if (stack.getSize() == 0) {
			actionText = "NO PEEK EMPTY STACK";
		}
		else {
			actionText = "TOP OF STACK: " + this.stack.peek();
		}
		this.fireChangeEvent(CHANGE_EVENT);


	}
	//pre: stack is not empty
	// post: returns AND REMOVES top element on current stack
	//       actionText contains information about results.
	public void pop() {
		if(stack.isEmpty())
		{
			actionText = "Cannot POP -- EMPTY STACK";
		}
		else 
		{
			String res = this.stack.pop();
			actionText = "POPPED: " + res;
		}
		this.fireChangeEvent(CHANGE_EVENT);
	}
	//pre: none
	// post: number of elements on stack is returned
	public int getSize() {
		return this.stack.getSize();
	}

	//pre: none
	// post: returns max size for current stack 
	public int getMaxSize()
	{
		return this.stack.getMaxSize();
	}
	// Display the maxSize field of the stack instance to the GUI by using getMaxSize() accessor.
	public void showMaxSize()
	{
		actionText = "MAX SIZE IS: " +  this.stack.getMaxSize();
		this.fireChangeEvent(CHANGE_EVENT);

	}
	//pre: none
	// post: returns true iff the current stack has a size of 0.
	public void testEmpty() 
	{

		actionText = (this.stack.isEmpty() ? "STACK IS EMPTY" : "STACK IS NOT EMPTY");
		this.fireChangeEvent(CHANGE_EVENT);		

	}
	//pre: none
	// post: returns true if the stack currently has MAX_ELEMENTS on it.
	public void testFull() 
	{

		actionText = (this.stack.isFull() ? "STACK IS FULL" : "STACK IS NOT FULL");
		this.fireChangeEvent(CHANGE_EVENT);			
	}
	// pre: none
	// post: current stack is empty, size is 0.
	public void clear()
	{  
		this.stack.clear();
		actionText = "Stack is CLEAR";
		this.fireChangeEvent(CHANGE_EVENT);
		//fill in code
	}
	//standard boilerplate method for change events
	public void addChangeListener(ChangeListener changeListener)
	{
		eventListenerList.add(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	public void removeChangeListener(ChangeListener changeListener)
	{
		eventListenerList.remove(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	// used when we need to notify the view that a change to the model has taken place
	// so that the view can update itself.
	public void fireChangeEvent(ChangeEvent changeEvent) {
		// Guaranteed to return a non-null array
		Object[] listeners = eventListenerList.getListenerList();
		// Process the listeners last to first, notifying
		// those that are interested in this event
		for (int i = listeners.length-2; i>=0; i-=2) {
			if (listeners[i]==ChangeListener.class) {
				((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
			}
		}
	}

}

--------------------------------------------------------------------------------------------------------------------

package asg7;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.util.Scanner;

import javax.swing.JLabel;
import javax.swing.JPanel;

public class StackPanel extends JPanel
	{
		/**
		 This class is used as part of the "view" and it displays
		 * (paints) a given stackEngine 
		 *  the stackEngine is sent to the constructor - it always
		 *  paints that stackEngine instance.
		 *  assumes a getSize() and getMaxSize() are available
		 *  from the stackEngine instance
		 */
		private static final long serialVersionUID = 1L;
		final int MYWIDTH=StackQueueFrame.FRAME_WIDTH/2;
		final int MYHEIGHT=StackQueueFrame.FRAME_HEIGHT-200;
		StackEngine engine;
		public StackPanel(StackEngine sEngine)
		{ 
			super();
			// Changed from pink to green
			this.setBackground(Color.PINK);
			this.setPreferredSize(new Dimension(MYWIDTH, MYHEIGHT));
			engine = sEngine;
			this.repaint();
		}
		public void paintComponent(Graphics g)
		{
			super.paintComponent(g);
			String theStack = engine.toString();
			Scanner input = new Scanner(theStack);
			g.setFont(new Font("default", Font.BOLD, 16));
			int size = engine.getSize();
			
			int ht = MYHEIGHT/(engine.getMaxSize()+1);
			int height= 20;
			int width = 10;
			// draw the stack element container as rectangles
			for(int i=0; i<engine.getMaxSize(); i++)
			{   
				g.drawRect(20, height-10,MYWIDTH-50,ht );
				
				height += ht;
			}
			// now draw the values in the stack in the contains from top to bottom
			height= (engine.getMaxSize()-size)*ht+25;
			
			for(int i=0; i<size; i++)
			{  
				String out = input.nextLine();
				if (i == 0) {
					g.setColor(Color.BLUE);
				}
				else {
					g.setColor(Color.WHITE);
				}
				g.drawString(out, width+15,  height);
				height += ht;
			}
			input.close();
			g.drawString(engine.getActionText(), 20, height);
		}
	}

--------------------------------------------------------------------------------------------------------------------

package asg7;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.util.Scanner;

import javax.swing.JPanel;

public class QueuePanel extends JPanel{
	
		/**This class is used as part of the "view" and it displays
		 * (paints) a given queueEngine 
		 *  the queueEngine is sent to the constructor - it always
		 *  paints that queueEngine instance.
		 *  assumes a getSize() and getMaxSize() are available
		 *  from the queueEngine instance
		 */
		private static final long serialVersionUID = 1L;
		final int MYWIDTH=StackQueueFrame.FRAME_WIDTH/2;
		//final int QWIDTH = StackQueueFrame.FRAME_WIDTH/4;
		final int MYHEIGHT=StackQueueFrame.FRAME_HEIGHT-200;
		private QueueEngine engine;

		public QueuePanel(QueueEngine qEngine)
		{ 
			super();
			this.setBackground(Color.YELLOW);
			this.setPreferredSize(new Dimension(MYWIDTH, MYHEIGHT));
			this.engine = qEngine;
			this.repaint();
		}
		public void paintComponent(Graphics g)
		{
			super.paintComponent(g);
			String theQueue = engine.toString();
			Scanner input = new Scanner(theQueue);
			g.setFont(new Font("default", Font.BOLD, 16));
			int size = engine.getSize();
			
			
			int ht = MYHEIGHT/(engine.getMaxSize() + 1);
			int height= 20;
			int width = 10;
			// draw the stack element container as rectangles
			for(int i=0; i<engine.getMaxSize(); i++)
			{   
				g.drawRect(20, height-10,MYWIDTH - 50,ht );
				
				height += ht;
			}
			// now draw the values in the stack in the contains from top to bottom
			height= (engine.getMaxSize()-size)*ht+25;
			int key = engine.getSize() - 1;
			for(int i=0; i<size; i++)
			{  
				String out = input.nextLine();
				if (i == 0 || i == key) {
					g.setColor(Color.RED);
				}
				else {
					g.setColor(Color.BLACK);
				}
				g.drawString(out, width+15,  height);
				height += ht;
			}
			input.close();
			g.drawString(engine.getActionText(), width, height);
			g.drawString("[Geoff's Copy]", width+80, height+30);
			}
		

	}//end of QueuePanel class

--------------------------------------------------------------------------------------------------------------------

package asg7;
/**  implementation of the view of two different stack implementations
 *   modeled with a stack engine
 *  that models/uses two stacks and allows a few operations on those stacks
 *  @author: LJBaker
 */
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class StackQueueViewImpl extends JPanel implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	JButton pushButton;
	JButton popButton;
	JButton frontButton;
	JButton addButton;
	JButton removeButton;
	JButton fullButton;
	JButton peekButton;
	JButton showRear;
	JButton checkEmpty;
	JButton clearStack;
	JButton maxSize;
	JButton clearQueue;
	
	JPanel stackButtonPanel ;
	JPanel queueButtonPanel;
	StackPanel stackPanel;
	QueuePanel queuePanel;
	StackEngine stackEngine;
	QueueEngine queueEngine;

	ChangeListener stackEngineListener;
	ChangeListener queueEngineListener;

	// default constructor, receives the stack engine model it is displaying and controlling
	public StackQueueViewImpl(StackEngine aStackEngine, QueueEngine aQueueEngine)
	{
		super();
		this.setPreferredSize(new Dimension(StackQueueFrame.FRAME_WIDTH-20, StackQueueFrame.FRAME_HEIGHT - 100));
		this.setLayout(new BorderLayout());
		this.stackEngine = aStackEngine;
		this.queueEngine = aQueueEngine;
		//create a "listener" for the stack engine, so if that engine changes, it can respond
		stackEngineListener = new ChangeListener()
		{ 
			public void stateChanged(ChangeEvent e){
				update();
			}

		};
		this.stackEngine.addChangeListener(stackEngineListener); // add listener to stackEngine for notification
		queueEngineListener = new ChangeListener()
		{ 
			public void stateChanged(ChangeEvent e){
				update();
			}

		};
		//create a "listener" for the queue engine, so if that engine changes, we can respond
		this.queueEngine.addChangeListener(queueEngineListener);
		init();
	}
	// initializes the view - all the widgets and listeners, sets up the view
	private void init() 
	{
		this.pushButton = new JButton("Push");
		this.popButton = new JButton("Pop");
		this.frontButton = new JButton("Show Front");
		this.addButton = new JButton("Add to Queue");
		this.removeButton = new JButton("Remove from Queue");
		this.peekButton = new JButton("Peek at Stack");
		this.fullButton = new JButton("Check Full(both)");
		this.stackPanel = new StackPanel(stackEngine);  // create a Stack Panel (view) and send it the engine it is "modeling"
		this.queuePanel = new QueuePanel(queueEngine);  // create a Queue Panel (view) and send it the engine it is "modeling"
		this.showRear = new JButton("Show Rear");
		this.checkEmpty = new JButton("Check Empty");
		this.clearStack = new JButton("Clear Stack");
		this.maxSize = new JButton("Max Size");
		this.clearQueue = new JButton("Clear Queue");
		
		stackButtonPanel = new JPanel();		  // used to hold all stack operation buttons
		stackButtonPanel.setLayout(new GridLayout(2,4));  // 1 row of 6 (change as more or less buttons are used)
		stackButtonPanel.add(pushButton);			// now add buttons to the panel
		stackButtonPanel.add(popButton);
		stackButtonPanel.add(fullButton);
		stackButtonPanel.add(peekButton);
		stackButtonPanel.add(checkEmpty);
		stackButtonPanel.add(clearStack);
		stackButtonPanel.add(maxSize);
		
		queueButtonPanel = new JPanel();			// used to hold all queue operation buttons - currently 3 but more should be added
		queueButtonPanel.setLayout(new GridLayout(2,4));
		queueButtonPanel.add(addButton);
		queueButtonPanel.add(removeButton);
		queueButtonPanel.add(frontButton);
		queueButtonPanel.add(showRear);
		queueButtonPanel.add(clearQueue);
		
		this.add(stackButtonPanel, BorderLayout.NORTH);  // this is the controller panel, add the stack button panel to the top across
		this.add(queuePanel,  BorderLayout.EAST);		  // add remaining components to this controller panel
		this.add(stackPanel, BorderLayout.WEST);
		this.add(queueButtonPanel,  BorderLayout.SOUTH);  // add queue button panel to the bottom

		pushButton.addActionListener(this); 
		popButton.addActionListener(this);
		frontButton.addActionListener(this);
		addButton.addActionListener(this);
		removeButton.addActionListener(this);
		fullButton.addActionListener(this);
		peekButton.addActionListener(this);
		showRear.addActionListener(this);
		checkEmpty.addActionListener(this);
		clearStack.addActionListener(this);
		maxSize.addActionListener(this);
		clearQueue.addActionListener(this);
	}
	//method called when an ChangeEvent is fired in the model
	// updates data on the view which will reflect any changes made to the model
	private void update() 
	{
		// repaint all models (engines)
		repaint();
	}

	// HANDLES all button actions, listeners for each button
	public void actionPerformed(ActionEvent e) {

		if(e.getSource().equals(pushButton))
		{  
			String item = JOptionPane.showInputDialog(this, "Enter value to push", "");
			if(item != null&& item.length() != 0)
				stackEngine.push(item);
		}
		else if (e.getSource().equals(popButton))
		{
			stackEngine.pop();  // note we popped the engine and it recovers the value popped	
		}

		else if (e.getSource().equals(addButton))
		{
			String item = JOptionPane.showInputDialog(this, "Enter value to add to queue:", "");
			if(item != null && item.length() != 0)
			     queueEngine.add(item);
		}
		else if (e.getSource().equals(removeButton))
		{
			queueEngine.remove();  // note we remove
		}
		else if (e.getSource().equals(frontButton))
		{
			queueEngine.showFront();
		}
		else if (e.getSource().equals(fullButton))
		{
			queueEngine.testFull();  
			stackEngine.testFull();
		}
		else if (e.getSource().equals(peekButton)) {
			stackEngine.peek();
		}
		else if (e.getSource().equals(showRear)) {
			queueEngine.showRear();
		}
		else if (e.getSource().equals(checkEmpty)) {
			stackEngine.testEmpty();
		}
		else if (e.getSource().equals(clearStack)) {
			stackEngine.clear();
		}
		else if (e.getSource().equals(maxSize)) {
			stackEngine.showMaxSize();
		}
		else if (e.getSource().equals(clearQueue)) {
			queueEngine.clear();
		}
		//stackArea.setText(actionText);
	}

} // end of StackQueueViewImpl class

------------------------------------------------------------------------------------------------------------------