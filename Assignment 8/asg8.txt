Geoff Arroyo
Assignment 8
---------------------------------------------------------------------------------------------------------------

package sorter;

import java.awt.FlowLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;

//main program that runs the Sort Gui testing
//uses the Model-View-Controller paradigm
//the controller is SortController 
//the models are SortEngine instances
//the view is part of the controller in SortView class

public class SortFrame {

	public static final int FRAME_WIDTH=1000;
	public static final int FRAME_HEIGHT=650;
	// 
	public static void main(String[]args)
	{
		SortEngine sortEngine = new SortEngineImpl();
		
		SortController myController = new SortController(sortEngine);
		JFrame frame = new JFrame("Sort Engine GUI Asg 8-- GEOFF");
		frame.setLayout(new FlowLayout());
		frame.addWindowListener( new WindowAdapter() {
		public void windowClosing(WindowEvent windowEvent)
		{
			System.exit(0);
		}
	});
		
	frame.getContentPane().add(myController);
	frame.setSize(SortFrame.FRAME_WIDTH,SortFrame.FRAME_HEIGHT);
	frame.setVisible(true);
   }

}

----------------------------------------------------------------------------------------------------------------

package sorter;

import java.util.Collections;
import java.util.EventListener;
import java.util.Random;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

public class SortEngineImpl implements SortEngine{
	private int maxSize;
	private int maxValue;
	private int myArray[];
	private boolean stopFlag;
	private EventListenerList eventListenerList;
	private final ChangeEvent CHANGE_EVENT = new ChangeEvent(this);
	public final Random generator = new Random();
	//SortEngineImpl has a no argument constructor that uses MAX_SIZE as its size, and MAX_VALUE as the upper 
	//limit of values in the engine's list of values (values are 1 to MAX_VALUE) randomly generated
	public SortEngineImpl() {
		this.maxSize = SortEngine.MAX_SIZE;
		this.maxValue = SortEngine.MAX_VALUE;
		this.myArray = new int[this.maxSize];
		for (int x = 0; x < this.maxSize; ++x) {
			this.myArray[x] =  generator.nextInt(this.maxSize) + 1;
		}
		this.eventListenerList = new EventListenerList();
		this.stopFlag = false;
	}
	// SortEngineImpl has a 1 argument constructor that receives the size to make the engine, has to 
	// be greater or equal to 1 and less than or equal to MAX_SIZE.
	public SortEngineImpl(int resize) {
		if (resize < 1 || resize > SortEngine.MAX_SIZE) {
			resize = SortEngine.MAX_SIZE;
		}
		this.maxSize = resize;
		this.maxValue = SortEngine.MAX_VALUE;
		this.myArray = new int[this.maxSize];
		for (int x = 0; x < this.maxSize; ++x) {
			this.myArray[x] = generator.nextInt(this.maxSize) + 1;
		}
		this.eventListenerList = new EventListenerList();
		this.stopFlag = false;
	}
	// post: returns the size of this engine's list
	public int getSize() {
		return this.myArray.length;
	}

	//receives: nothing 
	//task: list is sorted in ascending order using mergesort algorithm
	//returns: nothing
	public void mergeSort() {
		myMergeSort(this.myArray, 0, this.maxSize - 1);
		this.fireChangeEvent(CHANGE_EVENT);
	}
	
	// merge Algorithm
	private void merge(int arr[], int l, int m, int r)  { 
	        // Find sizes of two subarrays to be merged 
	        int n1 = m - l + 1; 
	        int n2 = r - m; 
	  
	        /* Create temp arrays */
	        int L[] = new int [n1]; 
	        int R[] = new int [n2]; 
	  
	        /*Copy data to temp arrays*/
	        for (int i=0; i<n1; ++i) 
	            L[i] = arr[l + i]; 
	        //this.fireChangeEvent(CHANGE_EVENT);
	        for (int j=0; j<n2; ++j) 
	            R[j] = arr[m + 1+ j]; 
	       // this.fireChangeEvent(CHANGE_EVENT);
	        	
	        /* Merge the temp arrays */
	  
	        // Initial indexes of first and second subarrays 
	        int i = 0, j = 0; 
	  
	        // Initial index of merged subarry array 
	        int k = l; 
	        while (i < n1 && j < n2 && this.stopFlag == false) 
	        { 
	            if (L[i] <= R[j]) 
	            { 
	                arr[k] = L[i]; 
	                i++; 
	            } 
	            else
	            { 
	                arr[k] = R[j]; 
	                j++; 
	                
	            } 
	            k++; 
	        } 
	        this.fireChangeEvent(CHANGE_EVENT);
	        /* Copy remaining elements of L[] if any */
	        while (i < n1 && this.stopFlag == false) 
	        { 
	            arr[k] = L[i]; 
	            i++; 
	            k++; 
	        } 
	  
	        /* Copy remaining elements of R[] if any */
	        while (j < n2 && this.stopFlag == false) 
	        { 
	            arr[k] = R[j]; 
	            j++; 
	            k++; 
	        } 
	        this.fireChangeEvent(CHANGE_EVENT);
	    } 
	  
	  // Main function that sorts arr[l..r] using 
	  // merge() 
	public void myMergeSort(int arr[], int l, int r) 
	    { 
	        if (l < r) 
	        { 
	            // Find the middle point 
	            int m = (l+r)/2; 
	  
	            // Sort first and second halves 
	            if (this.stopFlag == false) {
	            	myMergeSort(arr, l, m); 
	            	this.fireChangeEvent(CHANGE_EVENT);
	            }
	            if (this.stopFlag == false) {
	            	myMergeSort(arr , m+1, r); 
	            	this.fireChangeEvent(CHANGE_EVENT);
	            }
	            	// Merge the sorted halves 
	            if (this.stopFlag == false) {
	            	merge(arr, l, m, r); 
	            	this.fireChangeEvent(CHANGE_EVENT);
	            }
	       } 
	  } 
	
		//receives: nothing 
		//task: list is sorted in ascending order using quicksort algorithm
		//returns: nothing
	public void quickSort() {
		myQuickSort(this.myArray, 0, this.maxSize - 1);
	}
	
	//Partition method for the quickSort routine. 
	private int partition(int [] list, int lo, int hi)
	{
		//if (this.stopFlag == false) {
			int  pivotvalue;  // type of element being sorted
			pivotvalue = list[lo];
			if (this.stopFlag == false) {
				while(this.stopFlag == false && lo < hi)
				{
					if (stopFlag == false) {
						while (this.stopFlag == false && lo < hi && pivotvalue < list[hi]) {
							hi--;
						}
					}
					if (this.stopFlag == false) {
						if (lo != hi)
						{
							list[lo]=list[hi];
							this.fireChangeEvent(CHANGE_EVENT);
							lo++;
						}
					}
					if (this.stopFlag == false) {
						while (this.stopFlag == false && lo < hi && pivotvalue > list[lo]) {
							lo++;
						}
					}
					if (this.stopFlag == false) {
						if (lo !=hi)
						{
							list[hi]= list[lo];
							this.fireChangeEvent(CHANGE_EVENT);
							hi--;
						}
					}
				}
			}
			list[hi]=pivotvalue;
			pivotvalue=hi;  // returns this as pivotlocation 
			this.fireChangeEvent(CHANGE_EVENT);
			return pivotvalue;
		//}
	}
	  
	  
	    /* The function that implements QuickSort() 
	      arr[] --> Array to be sorted, 
	      low  --> Starting index, 
	      high  --> Ending index */
	private void myQuickSort(int[] list, int low, int high) 
	{
		int pivotlocation;
		if (this.stopFlag == false)
		{
			if (low < high)  //  is a list of more than 1 to sort?
			{
				pivotlocation = partition(list, low,high);
				
				myQuickSort(list, low, pivotlocation-1);
				
				myQuickSort(list, pivotlocation+1, high);
				//this.fireChangeEvent(CHANGE_EVENT);
			}
		}
	}

	//receives: nothing 
	//task: list is sorted in ascending order using insertion sort algorithm
	//returns: nothing
	public void insertionSort() {
		
		myInsertionSort(this.myArray, this.myArray.length);
		this.fireChangeEvent(CHANGE_EVENT);
	}
	
	// Insertion sort algorithm
	public void myInsertionSort(int[] list, int numElements) {
		if (this.stopFlag == false) {
			for (int index = 0; index < numElements; index++)
			{
				int k = index;
				while (k > 0)
				{
					if (list[k] < list[k-1] && this.stopFlag == false)
					{
						int temp = list[k];
						list[k] = list[k - 1];
						list[k-1] = temp;
						k--;
						this.fireChangeEvent(CHANGE_EVENT);
					}
					else
					{
						k = 0;
					}	
				}
			}
		}
	}

	//receives: nothing 
	//task: list is sorted in ascending order using selection sort algorithm
	//returns: nothing
	public void selectionSort() {
		mySelectionSort(this.myArray);
		this.fireChangeEvent(CHANGE_EVENT);
	}
	
	//Selection sort Algorithm 
	public void mySelectionSort(int arr[]) 
    { 
        int n = arr.length; 
        while (this.stopFlag == false) {
        	for (int i = 0; i < n-1; i++) 
            { 
                // Find the minimum element in unsorted array 
                int min_idx = i; 
                for (int j = i+1; j < n; j++) 
                    if (arr[j] < arr[min_idx] && this.stopFlag == false) 
                        min_idx = j; 
      
                // Swap the found minimum element with the first 
                // element 
                int temp = arr[min_idx]; 
                arr[min_idx] = arr[i]; 
                arr[i] = temp; 
                this.fireChangeEvent(CHANGE_EVENT);
            } 
        	break;
        }
 
 
    } 

	//receives: nothing
	// task: this sort engine's current list is randomly shuffled 
	// returns: nothing
	public void shuffleList() {
		for (int x = 0; x < 2; ++x) {
			for (int y = 0; y < this.maxSize; y++) {
				int swap1 = generator.nextInt(this.maxSize);
				int swap2 = generator.nextInt(this.maxSize);
				int temp = this.myArray[swap1];
				this.myArray[swap1] = this.myArray[swap2];
				this.myArray[swap2] = temp;
			}
		}
		this.fireChangeEvent(CHANGE_EVENT);
	}

	//receives: nothing
	//returns: array of elements that comprise the contents of this sort engine's values 
	public int [] getList() {
		return this.myArray;
	}
	//pre: 
	//post: stop flag is set to given flagValue, which controls sorting (turns it off or on for control)
	public void setStopFlag(boolean flagValue) {
		this.stopFlag = flagValue;
		//this.fireChangeEvent(CHANGE_EVENT);
	}

	// EVENT CHANGES
	// boiler plate standard methods for use with a model - adds change listener instance to this model's listener list
	public void addChangeListener(ChangeListener changeListener)
	{
		eventListenerList.add(ChangeListener.class, changeListener);
	}
	//standard boilerplate method for change events
	public void removeChangeListener(ChangeListener changeListener)
	{
		eventListenerList.remove(ChangeListener.class, changeListener);
	}
	
	// Override the toString method for the SortEngineImpl class. 
	public String toString() {
		String retValue = "";
		for (int x = 0; x < this.maxSize; x++) {
			retValue += this.myArray[x];
			retValue += "\n";
		}
		return retValue;
	}
	//standard boilerplate method for change events
	// used when we need to notify the view that a change to the model has taken place
	// so that the view can update itself.
	public void fireChangeEvent(ChangeEvent changeEvent) {
		// Guaranteed to return a non-null array
		Object[] listeners = eventListenerList.getListenerList();
		// Process the listeners last to first, notifying
		// those that are interested in this event
		for (int i = listeners.length-2; i>=0; i-=2) {
			if (listeners[i]==ChangeListener.class) {
				((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
			}
		}
	}

}
	
--------------------------------------------------------------------------------------------------------------

package sorter;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;


/* 1. Declare 3 buttons
 * 2. Constructed 3 buttons and add to buttonPanel
   3. Set ActionListeners for 3 buttons*/ 
public class SortController extends JPanel{
	private JButton startButton;
	private JButton stopButton;
	private JButton resetButton;
	private final ChangeEvent CHANGE_EVENT = new ChangeEvent(this);
	private SortEngine engine;
	private Thread sortThread;
	private JComboBox<String> sortBox;
	private SortView sortView;
	private String[] mySorts = {"Quick sort", "Merge Sort", "Insertion Sort", "Selection Sort"};
	private JPanel buttonPanel;
	private JPanel sortPanel;
	private ChangeListener sortListener;
	
	// One argument constructor for the controller where we pass the sortEngine instance to the controller.
	// The controller acts as a second JPanel and is in charge of the constructing the buttons and panel
	// That will be placed onto the Frame
	public SortController(SortEngine aEngine) {
		super();
		this.setPreferredSize(new Dimension(SortFrame.FRAME_WIDTH - 10, SortFrame.FRAME_HEIGHT - 20));
		// Contruct buttons and button panel
		this.startButton = new JButton("Start");
		this.stopButton = new JButton("Stop");
		this.resetButton= new JButton("Reset");
		//this.buttonPanel = new SortController(new SortEngineImpl());  // create a Stack Panel (view) and send it the engine it is "modeling"
		this.setLayout(new BorderLayout());
		this.sortPanel = new SortView(aEngine);
		this.buttonPanel = new JPanel();
		//Check using flowlayout
		this.buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 25, 15));
		this.buttonPanel.add(startButton);
		this.buttonPanel.add(stopButton);
		this.buttonPanel.add(resetButton);
		this.sortBox = new JComboBox<String>(this.mySorts);
		
		this.buttonPanel.add(sortBox);
		this.add(buttonPanel, BorderLayout.NORTH);
		//this.add(startButton, BorderLayout.NORTH);
		//startButton.addActionListener(this);
		
		// Construct sortBox
		
		// Construct view

		this.sortView = new SortView(aEngine);
		this.add(sortView, BorderLayout.CENTER);
		this.engine = aEngine;
		// Create a changeListener for the sortEngine
		// add that changeListener 
		
		// add that to the sortEngine
		this.sortListener = new ChangeListener()
		{ 
			public void stateChanged(ChangeEvent e){
				update();
			}

		};
		this.engine.addChangeListener(sortListener);
		init();
	} // end of constructor
	
	// repaint all models (engines)
	private void update() 
	{
		try {
			//System.out.println("I'm in the try block.");
			Thread.sleep(10);
		}
		catch (InterruptedException e) {
			System.out.println("Error in sleep.");
		}
		repaint();
	}
	
	// addListeners to the buttons
	public void init() {

		System.out.println("I'm creating and starting a new thread.");
		this.sortThread = new Thread();
		this.sortThread.start();

		System.out.println("Before first while loop.");
		while(this.sortThread != null && this.sortThread.isAlive()) {
			this.engine.setStopFlag(true);
			this.stopButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				while(sortThread != null && sortThread.isAlive()) {
					engine.setStopFlag(true);
				}
				System.out.println("I just killed the thread using stop.");
			}
		} ); 
			//sortThread.start();
			this.resetButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					while(sortThread != null && sortThread.isAlive()) {
						System.out.println("I'm in reset and i'm reshuffling the list.");
						engine.setStopFlag(true);
					}
					engine.shuffleList();
					System.out.println("I just shuffled the list using reset button.");
				}
			} ); 
			this.startButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					while(sortThread != null && sortThread.isAlive()) {
						engine.setStopFlag(true);
					}
					sortThread = new Thread(new Runnable() {
						public void run() {
							int index = sortBox.getSelectedIndex();
							System.out.println("I'm setting the stop flag to false because i hit start.");
							engine.setStopFlag(false);
							switch(index) {
								case 0:
									System.out.println("I'm running quicksort.");
									engine.quickSort();
									break;
								case 1: 
									System.out.println("I'm running mergesort.");
									engine.mergeSort();
									break;
								case 2:
									System.out.println("I'm running insertionsort");
									engine.insertionSort();
									break;
								case 3:
									System.out.println("I'm running selectionsort");
									engine.selectionSort();
							}
						}
					} );
					sortThread.start();
				}
			} ); 
		}
	}
}

---------------------------------------------------------------------------------------------------------------

package sorter;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JPanel;

public class SortView extends JPanel{
	private int[] list;
	private SortEngine engine;
	public static int MYWIDTH = SortFrame.FRAME_WIDTH - 40;
	public static int MYHEIGHT = SortFrame.FRAME_HEIGHT - 100;
	public JPanel aPanel;
	// This one argument constructor will create a SortView instance (Panel) which will act as a JPanel 
	// We will use this panel to draw lines of the values in the array from the engine that is passed in.
	public SortView(SortEngine aEngine) {
		super();
		this.setBackground(Color.BLUE);
		this.engine = aEngine;
		this.list = this.engine.getList();
		//this.aPanel = new SortController(new SortEngineImpl());
		this.setPreferredSize(new Dimension(MYWIDTH, MYHEIGHT));
		this.repaint();
	}
	
	// Override the paintComponent method for the SortView class. We are drawing every line from the sortEngnine's list 
	// and displaying it on the screen using coordinates. 
	public void paintComponent(Graphics g) {
		this.list = this.engine.getList();
		g.setColor(Color.MAGENTA);
		for (int i = 0; i < this.list.length; ++i) {
			int value = this.list[i];
			int x1 = i + 1;
			int x2 = i + 1;
			int y1 = MYHEIGHT;
			int y2 = MYHEIGHT - value;
			g.drawLine(x1, y1, x2, y2);
		}
	}
}

---------------------------------------------------------------------------------------------------------------

Enter your name: Geoff
********BEGIN TESTING FOR Geoff ***********
*****Begin test for all sorts*****
current list shuffled:                        [3, 2, 5, 4, 3]
current list Now Sorted with insertion sort:  [2, 3, 3, 4, 5]
current list shuffled:                       [5, 3, 2, 3, 4]
current list Now Sorted with merge sort:     [2, 3, 3, 4, 5]
current list shuffled:                       [2, 3, 3, 5, 4]
current list Now Sorted with quick sort:     [2, 3, 3, 4, 5]
current list shuffled:                         [3, 2, 4, 3, 5]
current list Now Sorted with selection sort:   [2, 3, 3, 4, 5]
current list shuffled:                        [1, 2]
current list Now Sorted with insertion sort:  [1, 2]
current list shuffled:                       [1, 2]
current list Now Sorted with merge sort:     [1, 2]
current list shuffled:                       [2, 1]
current list Now Sorted with quick sort:     [1, 2]
current list shuffled:                       [1, 2]
current list Now Sorted with selection sort: [1, 2]
current list shuffled:                       [9, 4, 7, 1, 10, 3, 5, 1, 6, 8]
current list Now Sorted with insertion sort: [1, 1, 3, 4, 5, 6, 7, 8, 9, 10]
current list shuffled:                       [5, 9, 8, 10, 1, 4, 3, 7, 1, 6]
current list Now Sorted with merge sort:     [1, 1, 3, 4, 5, 6, 7, 8, 9, 10]
current list Now Sorted with quick sort:     [1, 1, 3, 4, 5, 6, 7, 8, 9, 10]
current list shuffled:                       [9, 7, 4, 6, 3, 8, 10, 1, 5, 1]
current list Now Sorted with quick sort:     [1, 1, 3, 4, 5, 6, 7, 8, 9, 10]
current list shuffled:                       [6, 3, 7, 1, 9, 8, 4, 5, 1, 10]
current list Now Sorted with selection sort: [1, 1, 3, 4, 5, 6, 7, 8, 9, 10]
current list shuffled:                        [1]
current list Now Sorted with insertion sort:  [1]
current list Now Sorted with selection sort:  [1]
current list Now Sorted with merge sort:  [1]
current list Now Sorted with quicksort:  [1]
*****End test for all sorts*****
*****Testing constructors() and toString() *****
Current engine: 
10 4 7 10 9 10 6 2 4 2 
****** End of testing constructors (); *******
*****Begin test for getters*****
Matching: 2 == 2
Matching: 3 == 3
Matching: 5 == 5
Matching: 5 == 5
Matching: 6 == 6
Matching: 7 == 7
Matching: 8 == 8
Matching: 10 == 10
Matching: 10 == 10
Matching: 11 == 11
Matching: 11 == 11
Matching: 12 == 12
*****End testing of getters*****
***** Testing shuffleList () *****
After shuffle of 5 numbers, match count = 3
After shuffle of 1000 numbers, match count = 11
***** End of Testing shuffleList () *****
********END OF TESTING    ***********

-------------------------------------------------------------------------------------------------------------